// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import mongo "go.mongodb.org/mongo-driver/mongo"
import options "go.mongodb.org/mongo-driver/mongo/options"

// MongoDAL is an autogenerated mock type for the MongoDAL type
type MongoDAL struct {
	mock.Mock
}

// Find provides a mock function with given fields: filter, opts
func (_m *MongoDAL) Find(filter interface{}, opts ...*options.FindOptions) (*mongo.Cursor, context.Context, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mongo.Cursor
	if rf, ok := ret.Get(0).(func(interface{}, ...*options.FindOptions) *mongo.Cursor); ok {
		r0 = rf(filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Cursor)
		}
	}

	var r1 context.Context
	if rf, ok := ret.Get(1).(func(interface{}, ...*options.FindOptions) context.Context); ok {
		r1 = rf(filter, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.Context)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(interface{}, ...*options.FindOptions) error); ok {
		r2 = rf(filter, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindOne provides a mock function with given fields: filter, opts
func (_m *MongoDAL) FindOne(filter interface{}, opts ...*options.FindOneOptions) *mongo.SingleResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mongo.SingleResult
	if rf, ok := ret.Get(0).(func(interface{}, ...*options.FindOneOptions) *mongo.SingleResult); ok {
		r0 = rf(filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}

	return r0
}

// FindOneAndReplace provides a mock function with given fields: filter, replacement, opts
func (_m *MongoDAL) FindOneAndReplace(filter interface{}, replacement interface{}, opts ...*options.FindOneAndReplaceOptions) *mongo.SingleResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter, replacement)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mongo.SingleResult
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...*options.FindOneAndReplaceOptions) *mongo.SingleResult); ok {
		r0 = rf(filter, replacement, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}

	return r0
}

// InsertOne provides a mock function with given fields: document, opts
func (_m *MongoDAL) InsertOne(document interface{}, opts ...*options.InsertOneOptions) (*mongo.InsertOneResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, document)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mongo.InsertOneResult
	if rf, ok := ret.Get(0).(func(interface{}, ...*options.InsertOneOptions) *mongo.InsertOneResult); ok {
		r0 = rf(document, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, ...*options.InsertOneOptions) error); ok {
		r1 = rf(document, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
