// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/apostrophedottilde/blog-article-api/app/article/model"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: entity
func (_m *Repository) Create(entity model.ArticleModel) (string, error) {
	ret := _m.Called(entity)

	var r0 string
	if rf, ok := ret.Get(0).(func(model.ArticleModel) string); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.ArticleModel) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() ([]model.ArticleModel, error) {
	ret := _m.Called()

	var r0 []model.ArticleModel
	if rf, ok := ret.Get(0).(func() []model.ArticleModel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ArticleModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: id
func (_m *Repository) FindOne(id string) (model.ArticleModel, error) {
	ret := _m.Called(id)

	var r0 model.ArticleModel
	if rf, ok := ret.Get(0).(func(string) model.ArticleModel); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.ArticleModel)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, _a1
func (_m *Repository) Update(id string, _a1 model.ArticleModel) error {
	ret := _m.Called(id, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, model.ArticleModel) error); ok {
		r0 = rf(id, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
